openapi: "3.0.2"
info:
  title: "Pubsub Service API"
  version: "1.0.0"
  description: |
    ## Goal
    
    The goal of this API is to be able to use pubsub on any device and under any condition to build decentralized application. Powerful and well connected machine can use pubsub directly, but different reasons can make that difficult. Notable one are mobile or IOT devices: bad networking (NAT, ...), battery life, available compute or application lifespan.
    
    This API allow to delegate to a more powerful instance or a service provider this role of interacting with pubsub. As this API is asynchronous at its core, it allows to instruct that provider to listen to topics, sleep, and come back later to retrieve messages. 
    
    ## Design Principles
    
    - effort is made to allow client to operate with the minimum of requests, and within a limited time window. An example of that is /join that returns before the topic is actually subscribed and ready.
    - as the real world as shown, there is a gradient of necessary validation of received message, ranging from generic or protocol layer (ex:  deduplicate messages, max message size) to application specific (non-conforming message, abuse ...). All of those would usually be done in the same place if the application directly perform pubsub, but this is not the case here. The choice here is to split those into server side (the generic part, including some form of spam prevention) and the client side (anything that require specific logic or data), and have a way for the client to hint the server about those bad message or PeerID.
    - provide a versioned API from the start
    
    ## Versioning
    
    This API is expected to be hosted at an URL with a path ending with `/v1`, so that future major versions, if any, can be hosted side by side. An example of that would be `https://pubsub-service.example.com/v1`.
    
    ## Expected Usage Patterns
    
    ### Subscribing to a Topic
    
    This first step to use a pubsub service is to join a topic, and optionally define limits. For example, the following will join the `foo` topic for a maximum of 3600s, have a queue of 10 messages of maximum 1000 bytes, and drop old messages if the queue fills up:
    
    `POST /join?topic=foo&queue-length=10&queue-policy=drop-old&timeout=3600&max-message-size=1000`
    
    The service will confirm with a 202, and returns the effective limits as a confirmation. Those limits can be restricted by the service if they are outside of the maximum advertised in the /discovery endpoints:
    
    ```json
    {
      "queue-length": 10,
      "queue-policy": "drop-old",
      "timeout": 3600,
      "max-message-size": 1000
    }
    ```
  
    ### Publishing and Reading Messages
    
    We now can publish a message, by passing it as the body of the following request:
    
    `POST /publish?topic=foo`
    
    We can read messages in the queue:
    
    `POST /read?topic=foo&count=2`
    
    Here, we ask for a maximum of 2 messages. The service returns them, and inform us that there is 8 more in the queue, and that 2 have been dropped due to the queue filling up:
    
    ```json
    {
      "messages-dropped": 2,
      "messages-remaining": 8,
      "messages": [
        {
          "from": "QmdXGaeGiVA745XorV1jr11RHxB9z4fqykm6xCUPX1aTJo",
          "data": "aGVsbG8gd29ybGQK"
        },
        {
          "from": "QmdXGaeGiVA745XorV1jr11RHxB9z4fqykm6xCUPX1aTJo",
          "data": "aG93IGFyZSB0aGluZ3MgdG9kYXk/Cg=="
        }
      ]
    }
    ```
    
    ### Maintaining Active Subscription
    
    To avoid keeping alive irrelevant topic subscriptions, services have a timeout defined per topic. If the client is not active on that topic (/join, /publish, /read or /read-all), the service consider that the client is gone and teardown that subscription. To avoid that, clients should signal liveness with a query to one of those endpoints, which will reset the timeout to the maximum duration defined during /join.
    
    Which endpoint to use is up to the client. For example, a client that does read message might want to periodically /read or /read-all, while a client only writing messages might want to periodically use /join again if not enough messages are published.

    ## Multi-Tenant Considerations

    This specification doesn't enforce anything about how multi-tenancy should be implemented. It is however expected that an authentication layer (BasicAuth, OAuth, UCAN ...) may be added, which should provide the relevant client identifier to return the appropriate responses for that specific client. This is however not a requirement, as an implementation could serve a single client without authentication.

servers:
  - url: https://pubsub-service.example.com/v1

paths:
  /discovery:
    get:
      operationId: discovery
      summary: Describe the service configuration and limits
      description: "Describe the service configuration and limits.
      
      This endpoint returns the maximum acceptable settings that a client can ask for."
      responses:
        "200":
          description: "Returns the service configuration"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DiscoveryResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/InsufficientFunds"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "4XX":
          $ref: "#/components/responses/CustomServiceError"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /join:
    post:
      operationId: join
      summary: Subscribe to a pubsub topic and signal liveness
      description: "Subscribe to a pubsub topic.
      
      The client can define configuration for that topic (queue length, timeout...). Those configuration can be restricted by the server to conform to the server capability (see /discovery). The effective configuration is returned as part of the response.
      
      Join is only effective for some duration, defined by the previously described process. In order to keep listening to that topic, the client should perform a /join, /read, /read-all or /publish before expiration, to signal liveliness. This operation is idempotent if the given parameters result in the same configuration, but a different operation should be effective and drop messages if necessary.
      
      Note that subscription is not an instantaneous operation and can happen after this request returns. It may take some time before the subscription is processed and effective in the server."
      parameters:
        - $ref: "#/components/parameters/topic"
        - $ref: "#/components/parameters/queue-length"
        - $ref: "#/components/parameters/queue-policy"
        - $ref: "#/components/parameters/timeout"
        - $ref: "#/components/parameters/max-message-size"
      responses:
        "202":
          description: "Join accepted. The service will proceed and start to listen."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JoinResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/InsufficientFunds"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "4XX":
          $ref: "#/components/responses/CustomServiceError"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /leave:
    post:
      operationId: leave
      summary: Unsubscribe from a pubsub topic
      description: Unsubscribe from a pubsub topic, and destroy any stored message for that topic.
      parameters:
        - $ref: "#/components/parameters/topic"
      responses:
        "200":
          description: "Leave is effective"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/InsufficientFunds"
        "404":
          $ref: "#/components/responses/TopicNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "4XX":
          $ref: "#/components/responses/CustomServiceError"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /publish:
    post:
      operationId: publish
      summary: Publish a message in a pubsub topic and signal liveness
      parameters:
        - $ref: "#/components/parameters/topic"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageProperty"
      responses:
        "200":
          description: "Message published successfully."
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/InsufficientFunds"
        "404":
          $ref: "#/components/responses/TopicNotFound"
        "413":
          $ref: "#/components/responses/MessageTooBig"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "4XX":
          $ref: "#/components/responses/CustomServiceError"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /read:
    post:
      operationId: read
      summary: Read message from a pubsub topic and signal liveness. This consumes the returned messages from the queue
      parameters:
        - $ref: "#/components/parameters/topic"
        - $ref: "#/components/parameters/max-messages"
        - $ref: "#/components/parameters/include-signature"
      responses:
        "200":
          description: "Returns the read messages as well as pagination information."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadResponse'
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/InsufficientFunds"
        "404":
          $ref: "#/components/responses/TopicNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "4XX":
          $ref: "#/components/responses/CustomServiceError"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /read-all:
    post:
      operationId: readAll
      summary: Read messages from multiple topic at once and signal liveness. This consumes the returned messages from the queue.
      parameters:
        - $ref: "#/components/parameters/max-messages"
        - $ref: "#/components/parameters/filter-prefix"
        - $ref: "#/components/parameters/filter-suffix"
        - $ref: "#/components/parameters/include-signature"
      responses:
        "200":
          description: "Returns the read messages as well as pagination information."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAllResponse'
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/InsufficientFunds"
        "404":
          $ref: "#/components/responses/TopicNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "4XX":
          $ref: "#/components/responses/CustomServiceError"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /filter-peerid:
    post:
      operationId: filterPeerID
      summary: Instruct the service about read messages that the client side consider bogus or malicious.
      description: One necessary component of pubsub is message filtering. This could be required for various reasons, ranging from technical (re-broadcasted message, maximum size ...) to malicious (spam, abuse ..). Some of those, the most generic, are expected to be handled by the service. On the other side of the spectrum, application logic and data is required to evaluate the validity of a message. This endpoint exist so that client can provide that feedback, which will allow the service to filter messages or prune bad peers.
      parameters:
        - $ref: "#/components/parameters/topic"
        - $ref: "#/components/parameters/peerid"
      responses:
        "202":
          description: "Service understood the instruction and will proceed."
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/InsufficientFunds"
        "404":
          $ref: "#/components/responses/TopicNotFound"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "4XX":
          $ref: "#/components/responses/CustomServiceError"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

  /list:
    get:
      operationId: list
      summary: List subscribed topics
      parameters:
        - $ref: "#/components/parameters/filter-prefix"
        - $ref: "#/components/parameters/filter-suffix"
        - $ref: "#/components/parameters/max-topics"
        - $ref: "#/components/parameters/after-topic"
      responses:
        "200":
          description: "Returns a list of subscribed topic with characteristics."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse'
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "402":
          $ref: "#/components/responses/InsufficientFunds"
        "429":
          $ref: "#/components/responses/TooManyRequests"
        "4XX":
          $ref: "#/components/responses/CustomServiceError"
        "5XX":
          $ref: "#/components/responses/InternalServerError"

components:
  schemas:
    # Note, each config is optional, as the service can opt-in to not have limits
    DiscoveryResponse:
      description: "Response schema for the /discovery endpoint."
      type: object
      properties:
        queue-length:
          $ref: "#/components/schemas/QueueLengthProperty"
        timeout:
          $ref: "#/components/schemas/TimeoutProperty"
        max-message-size:
          $ref: "#/components/schemas/MaxMessageSizeProperty"
        max-topics:
          $ref: "#/components/schemas/MaxTopicsProperty"
    JoinResponse:
      description: "Response schema for the /join endpoint."
      type: object
      required:
        - queue-length
        - queue-policy
        - timeout
        - max-message-size
      properties:
        queue-length:
          $ref: "#/components/schemas/QueueLengthProperty"
        queue-policy:
          $ref: "#/components/schemas/QueuePolicyProperty"
        timeout:
          $ref: "#/components/schemas/TimeoutProperty"
        max-message-size:
          $ref: "#/components/schemas/MaxMessageSizeProperty"
    ReadResponse:
      description: "Response schema for the /read endpoint."
      type: object
      required:
        - messages-dropped
        - messages-remaining
        - messages
      properties:
        messages-dropped:
          $ref: "#/components/schemas/MessagesDroppedProperty"
        messages-remaining:
          $ref: "#/components/schemas/MessagesRemainingProperty"
        messages:
          $ref: "#/components/schemas/MessagesProperty"
    ReadAllResponse:
      description: "Response schema for the /read-all endpoint."
      type: array
      items:
        type: object
        required:
          - topic
          - messages
          - messages-dropped
          - messages-remaining
        properties:
          topic:
            $ref: "#/components/schemas/TopicProperty"
          messages-dropped:
            $ref: "#/components/schemas/MessagesDroppedProperty"
          messages-remaining:
            $ref: "#/components/schemas/MessagesRemainingProperty"
          messages:
            $ref: "#/components/schemas/MessagesProperty"
    ListResponse:
      description: "Response schema for the /list endpoint."
      type: array
      items:
        type: object
        required:
          - topic
        properties:
          topic:
            $ref: "#/components/schemas/TopicProperty"
          queue-length:
            $ref: "#/components/schemas/QueueLengthProperty"
          queue-policy:
            $ref: "#/components/schemas/QueuePolicyProperty"
          timeout:
            $ref: "#/components/schemas/TimeoutProperty"
          max-message-size:
            $ref: "#/components/schemas/MaxMessageSizeProperty"
          messages-remaining:
            $ref: "#/components/schemas/MessagesRemainingProperty"
          messages-dropped:
            $ref: "#/components/schemas/MessagesDroppedProperty"
    Failure:
      description: "Schema for a failure response."
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - reason
          properties:
            reason:
              type: string
              description: "A mandatory string identifying the type of error."
              example: "ERROR_CODE_FOR_MACHINES"
            details:
              type: string
              description: Optional, longer description of the error; may include UUID of transaction for support, links to documentation etc.
              example: "Optional explanation for humans with more details"

    QueueLengthProperty:
      description: "The maximum number of pubsub messages that can be stored by the service."
      type: integer
      format: int32
      minimum: 1
      example: 10
    TimeoutProperty:
      description: "The duration (in seconds) for which a pubsub topic remains subscribed after a /join operation."
      type: integer
      format: int32
      minimum: 1
      example: 600
    MaxMessageSizeProperty:
      description: "The maximum size (in bytes) allowed for a single pubsub message."
      type: integer
      format: int32
      minimum: 1
      example: 100000
    MaxTopicsProperty:
      description: "The maximum number of pubsub topics a client can subscribe to."
      type: integer
      format: int32
      minimum: 1
      example: 200
    QueuePolicyProperty:
      description: "The policy applied when the pubsub message queue is full."
      type: string
      enum:
        - drop-old
        - drop-new
      example: drop-old
    MessagesDroppedProperty:
      description: "The number of messages dropped due to queue capacity constraints."
      type: integer
      format: int32
      minimum: 0
      example: 5
    MessagesRemainingProperty:
      description: "The number of messages remaining in the queue."
      type: integer
      format: int32
      minimum: 0
      example: 7
    MessageProperty:
      type: object
      required:
        - from
        - data
      properties:
        data:
          description: "The content encoded with base64 standard alphabet with padding."
          type: string
          example: "YWJj"
        from:
          description: "The peer ID of the sender."
          type: string
          example: "QmcXhKGEAJT9DwwzKeEZsWrYTTGkzBdgeKif2MdAXBswJv"
        pubkey:
          description: "The sender's public key encoded with base64 standard alphabet with padding in X.509 DER format."
          type: string
          format: byte
          example: "MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmreiLkzVz2qlc2a4z8FbdUTzvka3vQVqPX0QRqr+Lgb6NOw0RVR8WTySavlg8zjOqgyRcEXMvmL1R34jMped68SBaRUyBBmvhT8ptzOZhZdSB4PPRwAfhILWyHnUm9JBPEmjN+Xi9wNt0WH8ds5S+RRnBoD1BagVxAykzjCJnZzAtKQYiU4jIG8zm7jwaWTZjukKaVsHAY7kjPF/8i2u3u+xltKGXYCwKbg621fTaEKBzC2mQORod9fw0qLhrOT/N1CuC5xCrlqvaDv8J4yKvJMd6XBG3lcsP/yhcCw9FjHdpolsRsomeSofvl7/OdaPMDimpdT012ohZAmPntUyNQIDAQAB"
        signature:
          description: "The signature for the message."
          type: string
          format: byte
          example: "An7j/dPng3efQoyBMiFy/owSc5kb4pVteI9BZEdL67Krt/W4zEUidKuTi67X580p5dqrd/y04iODgZ99/6sMxb6/7h0++K/M9jkVr2544+0GT5I7fozyPZavbL5bMTy5azeWpZMgI8PiaPJChkHOaRelc7fuqeVB/lIds0ojUhBASOdReNOOMXMvhMjwe/Hh+jACXlJK0SraBV5UET4SPqy/NBhdYdkDOmoB7E2EWHWx6QQk80WPVEAZsKyVkCTz2QT3Hzb4HRxMpLYZ41ZeDggkWtnkG62X6faTX33tBwiCtO2Xac0awf56PxEeXCXhYBwi04Sk2HtV5GBo7gPeCw=="
    MessagesProperty:
      description: "An array of messages that have been read."
      type: array
      items:
        $ref: "#/components/schemas/MessageProperty"
    TopicProperty:
      description: "The name of the pubsub topic."
      type: string
      example: "foo"

  parameters:
    topic:
      description: "The name of the pubsub topic."
      name: topic
      in: query
      required: true
      schema:
        type: string
        minLength: 1
        maxLength: 1000
      example: "foo"

    queue-length:
      description: "The maximum number of pubsub messages stored by the service."
      name: queue-length
      in: query
      required: false
      schema:
        type: integer
        default: 20
      example: 20

    queue-policy:
      description: "The policy to apply when the message queue is full."
      name: queue-policy
      in: query
      required: false
      schema:
        type: string
        enum:
          - drop-old
          - drop-new
      example: drop-old

    timeout:
      description: "The subscription timeout (in seconds) for a pubsub topic after a /join operation."
      name: timeout
      in: query
      required: false
      schema:
        type: integer
        default: 600
      example: 600

    max-message-size:
      description: "The maximum allowed size (in bytes) for a pubsub message."
      name: max-message-size
      in: query
      required: false
      schema:
        type: integer
      example: 100000

    max-messages:
      description: "The maximum number of messages to read."
      name: max-messages
      in: query
      required: false
      schema:
        type: integer
      example: 5

    include-signature:
      description: "If true, the response includes the public key and signature for each message."
      name: include-signature
      in: query
      required: false
      schema:
        type: boolean
        default: false
      example: true

    max-topics:
      description: "The maximum number of topics to return."
      name: max-topic
      in: query
      required: false
      schema:
        type: integer
      example: 5

    filter-prefix:
      description: "Filter topics by a prefix string."
      name: filter-prefix
      in: query
      required: false
      schema:
        type: string
        minLength: 1
        maxLength: 1000
      example: "/foo/bar"

    filter-suffix:
      description: "Filter topics by a suffix string."
      name: filter-suffix
      in: query
      required: false
      schema:
        type: string
        minLength: 1
        maxLength: 1000
      example: "/events"

    peerid:
      description: "The libp2p peer identity."
      name: peerid
      in: query
      required: true
      schema:
        type: string
        maxLength: 1000
      example: "QmdXGaeGiVA745XorV1jr11RHxB9z4fqykm6xCUPX1aTJo"

    after-topic:
      description: "A pagination cursor to list topics after a specified topic."
      name: after-topic
      in: query
      required: false
      schema:
        type: string
        minLength: 1
        maxLength: 1000

  responses:
    TooManyTopics:
      description: "Error response indicating that client subscribed to too many topics have been subscribed."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Failure"
          examples:
            BadRequestExample:
              $ref: "#/components/examples/TooManyTopicsExample"

    MessageTooBig:
      description: "Error response indicating that the message size exceeds the allowed limit."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Failure"
          examples:
            BadRequestExample:
              $ref: "#/components/examples/MessageTooBigExample"

    BadRequest:
      description: "Error response for a bad request."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Failure"
          examples:
            BadRequestExample:
              $ref: "#/components/examples/BadRequestExample"

    Unauthorized:
      description: "Error response for an unauthorized request."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Failure"
          examples:
            UnauthorizedExample:
              $ref: "#/components/examples/UnauthorizedExample"

    TopicNotFound:
      description: "Error response indicating that the specified topic was not found."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Failure"
          examples:
            NotFoundExample:
              $ref: "#/components/examples/TopicNotFoundExample"

    InsufficientFunds:
      description: "Error response indicating insufficient funds."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Failure"
          examples:
            InsufficientFundsExample:
              $ref: "#/components/examples/InsufficientFundsExample"

    TooManyRequests:
      description: "Error response for too many requests (rate limiting)."
      headers:
        Retry-After:
          required: false
          description: "Indicates how many seconds to wait before retrying."
          example: 60
          schema:
            type: integer
            minimum: 1
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Failure"
          examples:
            TooManyRequestsExample:
              $ref: "#/components/examples/TooManyRequestsExample"

    CustomServiceError:
      description: "Error response for a custom service error."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Failure"
          examples:
            CustomServiceErrorExample:
              $ref: "#/components/examples/CustomServiceErrorExample"

    InternalServerError:
      description: "Error response for an unexpected internal server error."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Failure"
          examples:
            InternalServerErrorExample:
              $ref: "#/components/examples/InternalServerErrorExample"

  examples:
    TooManyTopicsExample:
      value:
        error:
          reason: "TOO_MANY_TOPICS"
          details: "Too many topics are already subscribed."
      summary: "Response when the maximum number of topics has been reached."

    MessageTooBigExample:
      value:
        error:
          reason: "MESSAGE_TOO_BIG"
          details: "The message exceeds the allowed size."
      summary: "Response when the message size is too large."

    BadRequestExample:
      value:
        error:
          reason: "BAD_REQUEST"
          details: "The request is malformed or invalid."
      summary: "Example of a bad request response."

    UnauthorizedExample:
      value:
        error:
          reason: "UNAUTHORIZED"
          details: "Access token is missing or invalid."
      summary: "Response for an unauthorized request."

    TopicNotFoundExample:
      value:
        error:
          reason: "TOPIC_NOT_FOUND"
          details: "The specified topic was not found."
      summary: "Response when the topic is not found."

    InsufficientFundsExample:
      value:
        error:
          reason: "INSUFFICIENT_FUNDS"
          details: "The request could not be processed due to insufficient funds."
      summary: "Response for insufficient funds."

    TooManyRequestsExample:
      value:
        error:
          reason: "TOO_MANY_REQUESTS"
          details: "Too many requests have been sent to the server."
      summary: "Response when rate limiting is applied."

    CustomServiceErrorExample:
      value:
        error:
          reason: "CUSTOM_ERROR_CODE_FOR_MACHINES"
          details: "A custom error occurred."
      summary: "Response for a custom service error."

    InternalServerErrorExample:
      value:
        error:
          reason: "INTERNAL_SERVER_ERROR"
          details: "An unexpected internal server error occurred."
      summary: "Response for an internal server error."